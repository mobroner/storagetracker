import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import Header from "./components/Header";
import { StoreProvider } from "./components/StoreProvider";
import { getUserId } from "./lib/auth";
import { db } from "./lib/db";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default async function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const userId = await getUserId();
  let itemsByStorageArea = {};
  let storageAreas = [];
  let groups = [];
  let user = null;

  if (userId) {
    const userResult = await db.query(`SELECT id, name, email FROM users WHERE id = $1`, [userId]);
    user = userResult.rows[0];
    const itemsResult = await db.query(
      `SELECT
        sa.name as storage_area_name,
        ig.group_name,
        i.id,
        i.item_name,
        i.quantity,
        i.date_added,
        i.expiry_date
      FROM items i
      JOIN storage_areas sa ON i.storage_area_id = sa.id
      LEFT JOIN item_groups ig ON i.group_id = ig.id
      WHERE i.user_id = $1
      ORDER BY sa.name, ig.group_name, i.item_name`,
      [userId]
    );

    itemsByStorageArea = itemsResult.rows.reduce((acc, item) => {
      const { storage_area_name, group_name, ...itemData } = item;
      const effectiveGroupName = group_name || 'Ungrouped';
      if (!acc[storage_area_name]) {
        acc[storage_area_name] = {};
      }
      if (!acc[storage_area_name][effectiveGroupName]) {
        acc[storage_area_name][effectiveGroupName] = [];
      }
      acc[storage_area_name][effectiveGroupName].push(itemData);
      return acc;
    }, {});

    const storageAreasResult = await db.query(`SELECT * FROM storage_areas WHERE user_id = $1 ORDER BY name`, [userId]);
    storageAreas = storageAreasResult.rows;

    const groupsResult = await db.query(
      `SELECT
        ig.id,
        ig.group_name,
        array_agg(sag.storage_area_id) as storage_area_ids
      FROM item_groups ig
      LEFT JOIN storage_area_groups sag ON ig.id = sag.group_id
      WHERE ig.user_id = $1
      GROUP BY ig.id, ig.group_name
      ORDER BY ig.group_name`,
      [userId]
    );
    groups = groupsResult.rows;
  }

  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        <StoreProvider initialData={{ itemsByStorageArea, storageAreas, groups, user }}>
          <Header />
          {children}
        </StoreProvider>
      </body>
    </html>
  );
}
